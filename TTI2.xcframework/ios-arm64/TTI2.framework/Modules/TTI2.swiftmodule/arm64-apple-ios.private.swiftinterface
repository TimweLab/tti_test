// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TTI2
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import Alamofire
import AppTrackingTransparency
import DeveloperToolsSupport
import Foundation
import GoogleMobileAds
import InMobiSDK
import Kingfisher
import Lottie
import QuartzCore
import RiveRuntime
import RxCocoa
import RxDataSources
import RxGesture
import RxKeyboard
import RxSwift
import RxSwiftExt
import SVGKit
import SceneKit
import StartApp
import Swift
import SwiftUI
@_exported import TTI2
import UIKit.UIGestureRecognizerSubclass
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RAMAnimatedTabBarController : UIKit.UITabBarController {
  @_Concurrency.MainActor(unsafe) open var animatedItems: [TTI2.RAMAnimatedTabBarItem] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isBottomLineShow: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bottomLineColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bottomLineHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bottomLineMoveDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var viewControllers: [UIKit.UIViewController]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setViewControllers(_ viewControllers: [UIKit.UIViewController]?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var selectedIndex: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var selectedViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Now you can use UITabBar isHidden")
  @_Concurrency.MainActor(unsafe) open func animationTabBarHidden(_ isHidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TTI2.RAMAnimatedTabBarController {
  @_Concurrency.MainActor(unsafe) public func changeSelectedColor(_ textSelectedColor: UIKit.UIColor, iconSelectedColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setSelectIndex(from: Swift.Int, to: Swift.Int)
}
extension Swift.Collection {
  public subscript(safe i: Self.Index) -> Self.Iterator.Element? {
    get
  }
  public func at(_ i: Self.Index) -> Self.Iterator.Element?
}
public protocol RAMItemAnimationProtocol {
  func playAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  func deselectAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel, defaultTextColor: UIKit.UIColor, defaultIconColor: UIKit.UIColor)
  func selectedState(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
}
@objc @_inheritsConvenienceInitializers open class RAMItemAnimation : ObjectiveC.NSObject, TTI2.RAMItemAnimationProtocol {
  @objc @IBInspectable open var duration: CoreFoundation.CGFloat
  @objc @IBInspectable open var textSelectedColor: UIKit.UIColor
  @objc @IBInspectable open var iconSelectedColor: UIKit.UIColor!
  open func playAnimation(_: UIKit.UIImageView, textLabel _: UIKit.UILabel)
  open func playAnimation(textLabel _: UIKit.UILabel)
  open func deselectAnimation(_: UIKit.UIImageView, textLabel _: UIKit.UILabel, defaultTextColor _: UIKit.UIColor, defaultIconColor _: UIKit.UIColor)
  open func deselectAnimation(textLabel _: UIKit.UILabel, defaultTextColor _: UIKit.UIColor, defaultIconColor _: UIKit.UIColor)
  open func selectedState(_: UIKit.UIImageView, textLabel _: UIKit.UILabel)
  open func deselectedState(_: UIKit.UIImageView, textLabel _: UIKit.UILabel)
  open func selectedState(textLabel _: UIKit.UILabel)
  open func deselectedState(textLabel _: UIKit.UILabel)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RAMBadge : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) open class func badge() -> TTI2.RAMBadge
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func addBadgeOnView(_ onView: UIKit.UIView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TTIRuntimeException : Foundation.NSError {
  public var rootException: Swift.String?
  public var errorStatus: Swift.Int
  @objc dynamic public init()
  public init(code: Swift.Int, exception: Swift.String)
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc deinit
}
public struct SVGImgProcessor : Kingfisher.ImageProcessor {
  public var identifier: Swift.String
  public func process(item: Kingfisher.ImageProcessItem, options: Kingfisher.KingfisherParsedOptionsInfo) -> Kingfisher.KFCrossPlatformImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RAMAnimatedTabBarItem : UIKit.UITabBarItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var animation: TTI2.RAMItemAnimation!
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var textFontSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var iconColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var bgDefaultColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var bgSelectedColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var badge: TTI2.RAMBadge?
  @_Concurrency.MainActor(unsafe) open var iconView: (icon: UIKit.UIImageView, textLabel: UIKit.UILabel)?
  @_Concurrency.MainActor(unsafe) open func playAnimation()
  @_Concurrency.MainActor(unsafe) open func deselectAnimation()
  @_Concurrency.MainActor(unsafe) open func selectedState()
  @_Concurrency.MainActor(unsafe) open func deselectedState()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TTI2.RAMAnimatedTabBarItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var badgeValue: Swift.String? {
    @objc get
    @objc set(newValue)
  }
}
extension RxSwift.Reactive where Base : UIKit.UIViewController {
  public var viewDidAppear: RxSwift.Observable<Swift.Bool> {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class RAMFumeAnimation : TTI2.RAMItemAnimation {
  override open func playAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  override open func deselectAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel, defaultTextColor: UIKit.UIColor, defaultIconColor: UIKit.UIColor)
  override open func selectedState(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  @objc override dynamic public init()
  @objc deinit
}
public struct GameStatusResponse : Swift.Codable {
  public var userRegistered: Swift.Bool?
  public var eventStarted: Swift.Bool?
  public var userStartedEvent: Swift.Bool?
  public var userStartedEventDate: Swift.Int64?
  public var eventStartDate: Swift.Int64?
  public var eventEndDate: Swift.Int64?
  public var additionalParams: [Swift.String : Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NetworkError : Swift.Codable {
  public var description: Swift.String?
  public var detailed_description: Swift.String?
  public var code: Swift.Int?
  public var error: Swift.Bool?
  public init(statusCode: Swift.Int, message: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class RAMTransitionItemAnimations : TTI2.RAMItemAnimation {
  open var transitionOptions: UIKit.UIView.AnimationOptions!
  override open func playAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  override open func deselectAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel, defaultTextColor: UIKit.UIColor, defaultIconColor: UIKit.UIColor)
  override open func selectedState(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMFlipLeftTransitionItemAnimations : TTI2.RAMTransitionItemAnimations {
  @objc dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMFlipRightTransitionItemAnimations : TTI2.RAMTransitionItemAnimations {
  @objc dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMFlipTopTransitionItemAnimations : TTI2.RAMTransitionItemAnimations {
  @objc dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMFlipBottomTransitionItemAnimations : TTI2.RAMTransitionItemAnimations {
  @objc dynamic public init()
  @objc deinit
}
public struct GameRequest : Swift.Codable {
  public var sessionKey: Swift.String?
  public var userProfile: TTI2.UserProfile?
  public var additionalParams: [Swift.String : Swift.String]?
  public init(sessionKey: Swift.String, userProfile: TTI2.UserProfile)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class MyFrameworkBundle {
  public static let main: Foundation.Bundle
  @objc deinit
}
@_hasMissingDesignatedInitializers public class sdk {
  public static var isDebug: Swift.Bool? {
    get
    set
  }
  public static func ui(navigationController: UIKit.UIViewController?, apiKey: Swift.String, userProfile: TTI2.UserProfile?, utm: TTI2.UTM? = nil, redirectKey: Swift.String? = nil, callback: ((Swift.String) -> ())? = nil) throws
  public static func getUserGame(apiKey: Swift.String, request: TTI2.GameRequest, callback: ((TTI2.UserGameResponse?, TTI2.NetworkError?) -> ())?) throws
  public static func getStatusGame(apiKey: Swift.String, request: TTI2.GameRequest, callback: ((TTI2.GameStatusResponse?, TTI2.NetworkError?) -> ())?) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMRotationAnimation : TTI2.RAMItemAnimation {
  public enum RAMRotationDirection {
    case left
    case right
    public static func == (a: TTI2.RAMRotationAnimation.RAMRotationDirection, b: TTI2.RAMRotationAnimation.RAMRotationDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open var direction: TTI2.RAMRotationAnimation.RAMRotationDirection!
  override open func playAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  override open func deselectAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel, defaultTextColor: UIKit.UIColor, defaultIconColor: UIKit.UIColor)
  override open func selectedState(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMLeftRotationAnimation : TTI2.RAMRotationAnimation {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMRightRotationAnimation : TTI2.RAMRotationAnimation {
  @objc override dynamic public init()
  @objc deinit
}
public struct UserGameResponse : Swift.Codable {
  public var nickName: Swift.String?
  public var tierId: Swift.Int32?
  public var tierName: Swift.String?
  public var avatarImageUrl: Swift.String?
  public var messageToUser: Swift.String?
  public var currentCityName: Swift.String?
  public var currentCityPosition: Swift.Int32?
  public var totalCities: Swift.Int32?
  public var cardTag: Swift.String?
  public var buttonLabel: Swift.String?
  public var buttonActionDestination: Swift.String?
  public var buttonActionKey: Swift.String?
  public var additionalParams: [Swift.String : Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UTM : Swift.Codable {
  public init(utmSource: Swift.String?, utmCampaign: Swift.String?, utmMedium: Swift.String?, utmTerm: Swift.String?, utmContent: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UserTier : Swift.String, Swift.Codable {
  case silver
  case gold
  case diamond
  case platinum
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserProfile : Swift.Codable {
  public var profileId: Swift.String?
  public var email: Swift.String?
  public var defaultSegment: Swift.String?
  public var userMsisdns: [TTI2.UserMsisdn]?
  public var lang: Swift.String?
  public var additionalParams: [Swift.String : Swift.String]?
  public var region: Swift.String?
  public var tier: TTI2.UserTier
  public init(profileId: Swift.String, plan: Swift.String = "postpaid", lang: Swift.String = "en")
  public init(profileId: Swift.String, mail: Swift.String, defaultSegment: Swift.String, userMsisdns: [TTI2.UserMsisdn], tier: TTI2.UserTier, region: Swift.String? = nil, lang: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserMsisdn : Swift.Codable {
  public var msisdn: Swift.String?
  public var type: Swift.String?
  public var balance: Swift.Double?
  public var isPrimaryNumber: Swift.Bool?
  public var msisdnSegment: Swift.String?
  public var additionalParams: [Swift.String : Swift.String]?
  public init(msisdn: Swift.String, balance: Swift.Double, msisdnSegment: Swift.String, isPrimary: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ErrorMessagePlacement {
  case `default`
  case bottom
  public static func == (a: TTI2.ErrorMessagePlacement, b: TTI2.ErrorMessagePlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SkyFloatingLabelTextField : UIKit.UITextField {
  @objc @_Concurrency.MainActor(unsafe) open var isLTRLanguage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFadeInDuration: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFadeOutDuration: Swift.Double
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var errorMessagePlacement: TTI2.ErrorMessagePlacement {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var errorLabelAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var errorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var textErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var titleErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var disabledColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedLineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var lineView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) open var errorLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) open var titleFormatter: (_ text: Swift.String) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var errorMessage: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var editingOrSelected: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var hasErrorMessage: Swift.Bool {
    get
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func editingChanged()
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func updateColors()
  @_Concurrency.MainActor(unsafe) open func setTitleVisible(_ titleVisible: Swift.Bool, animated: Swift.Bool = false, animationCompletion: ((_ completed: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func isTitleVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func isErrorVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func titleLabelRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func errorLabelRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func lineViewRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func titleHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func errorHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func textHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMBounceAnimation : TTI2.RAMItemAnimation {
  override open func playAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  override open func deselectAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel, defaultTextColor: UIKit.UIColor, defaultIconColor: UIKit.UIColor)
  override open func selectedState(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class RAMFrameItemAnimation : TTI2.RAMItemAnimation {
  @objc @IBInspectable open var isDeselectAnimation: Swift.Bool
  @objc @IBInspectable open var imagesPath: Swift.String!
  @objc override dynamic open func awakeFromNib()
  open func setAnimationImages(_ images: Swift.Array<UIKit.UIImage>)
  override open func playAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  override open func deselectAnimation(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel, defaultTextColor: UIKit.UIColor, defaultIconColor _: UIKit.UIColor)
  override open func selectedState(_ icon: UIKit.UIImageView, textLabel: UIKit.UILabel)
  @objc override dynamic public init()
  @objc deinit
}
public enum ScreenKey : Swift.String {
  case splash
  case pre_register_welcome
  case create_avatar
  case registration_success
  case user_profile
  case home
  case map
  case map_city_list
  case map_levels_list
  case map_tiers_list
  case prizes
  case prizes_to_redeem
  case prizes_redeemed
  case journey
  case leaderboard_1
  case leaderboard_2
  case leaderboard_3
  case leaderboard_4
  case leaderboard_generic
  case sticker_list_city
  case sticker_list_badge
  case sticker_list_goddies
  case daily_checkup
  case missions
  case inbox
  case onboarding
  case webview_about
  case webview_rules
  case webview_privacy_policy
  case webview_terms_and_conditions
  case webview_about_draw
  case watch_video
  case video
  case quiz
  case webview_more_info
  case onboarding_boosters
  case onboarding_checkup
  case onboarding_prizes
  case reward_history
  case help
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension TTI2.UserTier : Swift.Equatable {}
extension TTI2.UserTier : Swift.Hashable {}
extension TTI2.UserTier : Swift.RawRepresentable {}
extension TTI2.RAMRotationAnimation.RAMRotationDirection : Swift.Equatable {}
extension TTI2.RAMRotationAnimation.RAMRotationDirection : Swift.Hashable {}
extension TTI2.ErrorMessagePlacement : Swift.Equatable {}
extension TTI2.ErrorMessagePlacement : Swift.Hashable {}
extension TTI2.ScreenKey : Swift.Equatable {}
extension TTI2.ScreenKey : Swift.Hashable {}
extension TTI2.ScreenKey : Swift.RawRepresentable {}
