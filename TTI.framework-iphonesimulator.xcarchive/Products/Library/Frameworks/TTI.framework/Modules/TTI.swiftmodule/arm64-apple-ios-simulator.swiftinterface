// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TTI
import AVFoundation
import Alamofire
import Foundation
import Kingfisher
import Lottie
import Swift
@_exported import TTI
import UIKit.UIGestureRecognizerSubclass
import UIKit
import WebKit
import _Concurrency
public enum ScreenKey : Swift.String {
  case splash
  case pre_register_welcome
  case create_avatar
  case registration_success
  case home
  case map
  case map_city_list
  case map_levels_list
  case map_tiers_list
  case prizes
  case prizes_to_redeem
  case prizes_redeemed
  case journey
  case leaderboard_1
  case leaderboard_2
  case leaderboard_3
  case leaderboard_4
  case leaderboard_generic
  case sticker_list_city
  case sticker_list_badge
  case sticker_list_goddies
  case daily_checkup
  case missions
  case inbox
  case onboarding
  case webview_about
  case webview_rules
  case webview_privacy_policy
  case webview_terms_and_conditions
  case webview_about_draw
  case watch_video
  case video
  case quiz
  case webview_more_info
  case onboarding_boosters
  case onboarding_checkup
  case onboarding_prizes
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class sdk {
  public static var isDebug: Swift.Bool? {
    get
    set
  }
  public static func ui(navigationController: UIKit.UINavigationController?, apiKey: Swift.String, userProfile: TTI.UserProfile?, utm: TTI.UTM? = nil, redirectKey: Swift.String? = nil, callback: ((Swift.String) -> ())? = nil) throws
  public static func getUserGame(apiKey: Swift.String, request: TTI.GameRequest, callback: ((TTI.UserGameResponse?, TTI.NetworkError?) -> ())?) throws
  public static func getStatusGame(apiKey: Swift.String, request: TTI.GameRequest, callback: ((TTI.GameStatusResponse?, TTI.NetworkError?) -> ())?) throws
  @objc deinit
}
public struct NetworkError : Swift.Codable {
  public var description: Swift.String?
  public var detailed_description: Swift.String?
  public var code: Swift.Int?
  public var error: Swift.Bool?
  public init(statusCode: Swift.Int, message: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GameStatusResponse : Swift.Codable {
  public var userRegistered: Swift.Bool?
  public var eventStarted: Swift.Bool?
  public var userStartedEvent: Swift.Bool?
  public var userStartedEventDate: Swift.Int64?
  public var eventStartDate: Swift.Int64?
  public var eventEndDate: Swift.Int64?
  public var additionalParams: [Swift.String : Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TTIRuntimeException : Foundation.NSError {
  public var rootException: Swift.String?
  public var errorStatus: Swift.Int
  @objc dynamic public init()
  public init(code: Swift.Int, exception: Swift.String)
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc deinit
}
public struct UserGameResponse : Swift.Codable {
  public var nickName: Swift.String?
  public var tierId: Swift.Int32?
  public var tierName: Swift.String?
  public var avatarImageUrl: Swift.String?
  public var messageToUser: Swift.String?
  public var currentCityName: Swift.String?
  public var currentCityPosition: Swift.Int32?
  public var totalCities: Swift.Int32?
  public var cardTag: Swift.String?
  public var buttonLabel: Swift.String?
  public var buttonActionDestination: Swift.String?
  public var buttonActionKey: Swift.String?
  public var additionalParams: [Swift.String : Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UTM : Swift.Codable {
  public init(utmSource: Swift.String?, utmCampaign: Swift.String?, utmMedium: Swift.String?, utmTerm: Swift.String?, utmContent: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UserProfile : Swift.Codable {
  public var profileId: Swift.String?
  public var email: Swift.String?
  public var defaultSegment: Swift.String?
  public var userMsisdns: [TTI.UserMsisdn]?
  public var lang: Swift.String?
  public var additionalParams: [Swift.String : Swift.String]?
  public init(profileId: Swift.String, plan: Swift.String = "postpaid", lang: Swift.String = "en")
  public init(profileId: Swift.String, mail: Swift.String, defaultSegment: Swift.String, userMsisdns: [TTI.UserMsisdn], lang: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UserMsisdn : Swift.Codable {
  public var msisdn: Swift.String?
  public var type: Swift.String?
  public var balance: Swift.Double?
  public var isPrimaryNumber: Swift.Bool?
  public var msisdnSegment: Swift.String?
  public var additionalParams: [Swift.String : Swift.String]?
  public init(msisdn: Swift.String, balance: Swift.Double, msisdnSegment: Swift.String, isPrimary: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GameRequest : Swift.Codable {
  public var sessionKey: Swift.String?
  public var userProfile: TTI.UserProfile?
  public var additionalParams: [Swift.String : Swift.String]?
  public init(sessionKey: Swift.String, userProfile: TTI.UserProfile)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension TTI.ScreenKey : Swift.Equatable {}
extension TTI.ScreenKey : Swift.Hashable {}
extension TTI.ScreenKey : Swift.RawRepresentable {}
